/*! @file : lpuart0.c
 * @author  Gina Paola Guerrero Martinez
 * @version 1.0.0
 * @date    12/11/2022
 * @brief   Driver para controlar el puerto UART0
 * @details
 *
*/
/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "K32L2B31A.h"
#include "fsl_lpuart.h"
#include "lpuart0.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
#define LPUART0_BUFFER_SIZE_MAX	50

/*******************************************************************************
 * Private Prototypes
 ******************************************************************************/


/*******************************************************************************
 * External vars
 ******************************************************************************/


/*******************************************************************************
 * Local vars
 ******************************************************************************/
static uint8_t data_lpUART0[LPUART0_BUFFER_SIZE_MAX];
static uint8_t flag_new_data=0;
static uint8_t new_data_index=0;

/*******************************************************************************
 * Private Source Code
 ******************************************************************************/
/* LPUART0_IRQn interrupt handler */
void LPUART0_SERIAL_RX_TX_IRQHANDLER(void) {
	uint32_t intStatus;

	intStatus = LPUART_GetStatusFlags(LPUART0_PERIPHERAL);

	if ((kLPUART_RxDataRegFullFlag) & intStatus) {
		data_lpUART0 = LPUART_ReadByte(LPUART0);
	}

#if defined __CORTEX_M && (__CORTEX_M == 4U)
    __DSB();
  #endif
}


/*******************************************************************************
 * Public Source Code
 ******************************************************************************/
 uint8_t read_data_from_uart0(void){
	 if(dato_lpuart0_index!=0){
		return (dato_lpuart0[dato_lpuart0_index-1]);
	 }else{
		return(0x00);
	 }
 }

 uint8_t has_new_data(void) {
 	return (flag_nuevo_dato_lpuart0);
 }

void set_data_uart0(uint8_t new_data){
	 data_lpUART0= new_data;
 }

void reset_buffer(void){
	for(uint8_t i; i<LPUART0_BUFFER_SIZE_MAX; i++){
		dato_lpuart0[i]=0x00;
	}
	dato_lpuart0_index=0;
}





 
